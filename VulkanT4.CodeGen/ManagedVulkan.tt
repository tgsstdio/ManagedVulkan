<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="VulkanT4" #>
<#@ assembly name="$(SolutionDir)Lib\VulkanT4.dll" #>
<#@ output extension=".h" #>
<#

var entitiesXml = "vk.xml";

var doc = XDocument.Load(Host.ResolvePath(entitiesXml), LoadOptions.PreserveWhitespace);

var generator = new VulkanT4.VkAPIGenerator();
generator.Apply(doc);

var ns = "ManagedVulkan";
#>
// ManagedVulkan.h

#pragma once

#include <vulkan\vulkan.h>

using namespace System;

namespace <#= ns #> 
{
	// HANDLES
<#	foreach(var h in generator.Handles.Values)
	{
#>
	public ref class <#= h.Name #>
	{
	internal:
		<#= h.Key #> mHandle;
	};

<#
	}
#>
	// ENUMS
<#	foreach(var el in generator.Enums)
	{
		var flags = el.UseFlags ? "[FlagsAttribute] ": "";
#>
	<#= flags #>public enum class <#= el.Name #> : Int32
	{
<#		
		foreach(var i in el.Items)
		{			
			var finalValue = i.Value != null ? " = " + i.Value + "," : ((i.BitPosition != null) ? " = 1 << " + i.BitPosition + "," : ",");
			var comments = i.Comment != null ? "// " + i.Comment : "";
#>
		<#= i.Name #><#= finalValue #> <#= comments #>
<#		
		}
#>
	};

<# 
	}
#>
	// STRUCTS 
<#  foreach (var s in generator.Structs.Values)
	{
#>
	public ref class <#= s.Name #>
	{
	private:
<#		
		foreach(var m in s.Members)
		{
			if (m.IncludeInDeclaration)
			{
				var initialValue = m.Translation != null ? m.Translation.Default : ";";
#>
		<#= m.CSharpType #> <#= m.FieldName #><#= initialValue #>
<#
			}
		}
#>
	public:
<#		
		foreach(var m in s.Members)
		{
			if (m.IncludeInDeclaration)
			{
#>
		property <#= m.CSharpType #> <#= m.Name #>
		{
			<#= m.CSharpType #> get()
			{
				return <#= m.FieldName #>;
			}
			void set(<#= m.CSharpType #> value)
			{
				<#= m.FieldName #> = value; 
			}
		}
<#
			}
		}
#>
	};

<#  
	}	
#>
	// DELEGATES
<#	foreach(var del in generator.Delegates)
	{
#>
	public delegate void <#= del.Key #>(<#
			var first = true;
			var separator = "";
			foreach(var param in del.Parameters)
			{ 
				var paramName = param.Name ?? "<NAME>";
				var paramType = param.Translation != null ? param.Translation.MethodOnly : (param.CppType ?? "<TYPE>");	

			#><#= separator #><#= paramType #> <#= paramName #><#
				if (first)
				{
					separator = ", ";
					first = false;
				}	
			} #>);

<#
	}
#>

	// INTERFACES
<#
	foreach (var proxy in generator.Proxies.Values)
	{
#>
	// <#= proxy.Key #>
	public interface class I<#= proxy.Key #>
	{
<#	
		foreach (var m in proxy.Methods)
		{
			var returnType = m.Translation != null ? m.Translation.CSharpType : (m.Function.ReturnType ?? "<RETURN_TYPE>");	

#>
		<#= returnType #> <#= m.Name #>(<#
			var first = true;
			var separator = "";
			foreach(var param in m.Parameters)
			{ 
				var paramName = param.Name ?? "<NAME>";
				var paramType = param.Translation != null ? param.Translation.MethodOnly :  
					(	param.CSharpType ?? 
						(	
							param.CppType ?? "<TYPE>"
						)
					);
			#><#= separator #><#= paramType #> <#= paramName #><#
				if (first)
				{
					separator = ", ";
					first = false;
				}	
			} #>);
<#
		}
#>
	};

	public ref class <#= proxy.Name #> : public I<#= proxy.Key #>
	{
<#
	if (proxy.RequiresInstance)
	{
#>
	private:
		<#= proxy.Key #> mInst;
<#
	}
#>
	public:
<#	
		foreach (var m in proxy.Methods)
		{
			var returnType = m.Translation != null ? m.Translation.CSharpType : (m.Function.ReturnType ?? "<RETURN_TYPE>");	
#>
		<#= returnType #> <#= m.Name #>(<#
			var first = true;
			var separator = "";
			foreach(var param in m.Parameters)
			{ 
				var paramName = param.Name ?? "<NAME>";
				var paramType = param.Translation != null ? param.Translation.MethodOnly :  
					(	param.CSharpType ?? 
						(	
							param.CppType ?? "<TYPE>"
						)
					);

			#><#= separator #><#= paramType #> <#= paramName #><#
				if (first)
				{
					separator = ", ";
					first = false;
				}	
			} #>);
<#
		}
#>
	};

<#
	}
#>
}