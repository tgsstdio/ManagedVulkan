<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="VulkanT4" #>
<#@ assembly name="$(SolutionDir)Lib\VulkanT4.dll" #>
<#@ output extension=".h" #>
<#

var entitiesXml = "vk.xml";

var doc = XDocument.Load(Host.ResolvePath(entitiesXml), LoadOptions.PreserveWhitespace);

var generator = new VulkanT4.VkAPIGenerator();
generator.Apply(doc);

var ns = "ManagedVulkan";
#>
// ManagedVulkan.h

#pragma once

#include <vulkan\vulkan.h>
#include "VkHandles.h"
#include "VkEnums.h"
#include "VkDelegates.h"
#include "VkStructs.h"

using namespace System;

namespace <#= ns #> 
{
	// INTERFACES
<#
	foreach (var proxy in generator.Proxies.Values)
	{
#>
	public ref class <#= proxy.Name #>
	{
<#
	if (proxy.RequiresInstance)
	{
#>
	private:
		<#= proxy.Key #> mHandle;
<#
	}
#>
	public:
<#	
		foreach (var m in proxy.Methods)
		{
			var returnType = m.Translation != null ? m.Translation.CSharpType : (m.Function.ReturnType ?? "<RETURN_TYPE>");	
#>
		<#= returnType #> <#= m.Name #>(<#
			var first = true;
			var separator = "";
			foreach(var param in m.Parameters)
			{ 

				var paramName = param.Name ?? "<NAME>";
				
				string paramType = "<TYPE>";

				if (param.Translation != null)
				{				
					if (param.UseOutStatement)
					{
						paramType = "out ";
						
						if (param.IsArray)
						{
							paramType += "array<" + param.Translation.CSharpType + ">^";
						}
						else
						{
							paramType += param.Translation.CSharpType;
						}
					}
					else
					{
						if (param.IsArray)
						{
							paramType = "array<" + param.Translation.CSharpType + ">^";
						}
						else
						{
							paramType = param.Translation.MethodOnly;
						}						
					}
				}
				else 
				{
					paramType = param.CSharpType ?? param.CppType ?? "<TYPE>";
				}
			#><#= separator #><#= paramType #> <#= paramName #><#
				if (first)
				{
					separator = ", ";
					first = false;
				}	
			} #>);
<#
			
		}
#>
	};

<#
	}
#>
}