<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="VulkanT4" #>
<#@ assembly name="$(SolutionDir)Lib\VulkanT4.dll" #>
<#@ output extension=".h" #>
<#

var entitiesXml = "vk.xml";

var doc = XDocument.Load(Host.ResolvePath(entitiesXml), LoadOptions.PreserveWhitespace);

var generator = new VulkanT4.VkAPIGenerator();
generator.Apply(doc);

var ns = "ManagedVulkan";
#>
// ManagedVulkan.h

#pragma once

#include <vulkan\vulkan.h>
#include "VkHandles.h"
#include "VkEnums.h"
#include "VkDelegates.h"

using namespace System;

namespace <#= ns #> 
{

	// STRUCTS 
<#  foreach (var s in generator.Structs.Values)
	{
#>
	public ref class <#= s.Name #>
	{
	private:
<#		
		foreach(var m in s.Members)
		{
			if (m.IncludeInDeclaration)
			{
				var initialValue = m.Translation != null ? m.Translation.Default : ";";
#>
		<#= m.CSharpType #> <#= m.FieldName #><#= initialValue #>
<#
			}
		}
#>
	public:
<#		
		foreach(var m in s.Members)
		{
			if (m.IncludeInDeclaration)
			{
				var paramType = (m.Translation != null && m.Translation.NeedsNamespace ?  ns + "::" : "") + m.CSharpType;

#>
		property <#= paramType #> <#= m.Name #>
		{
			<#= paramType #> get()
			{
				return <#= m.FieldName #>;
			}
			void set(<#= paramType #> value)
			{
				<#= m.FieldName #> = value; 
			}
		}
<#
			}
		}
#>
	internal:
		void CopyTo(<#= s.Key #>* dst, List<IntPtr>^ pins)
		{
<#
		foreach(var m in s.Members)
		{
			if (m.Translation != null && m.Translation.StructInfo != null)
			{
#>
			<#= m.FieldName #>->CopyTo(&dst-><#= m.Key #>, pins);
<#
			}

			else if (m.CSharpType == "String^")
			{
#>

			IntPtr str_<#= m.Key #> = Marshal::StringToHGlobalAnsi(<#= m.FieldName #>);
			pins->Add(str_<#= m.Key #>);			
			dst-><#= m.Key #> = static_cast <char*> (str_<#= m.Key #>.ToPointer());

<#
			}

			else if (m.CppType == "VkBool32")
			{
#>
			dst-><#= m.Key #> =	<#= m.FieldName #> ? 1 : 0;
<#
			}

			else if (m.CppType == "VkBool32")
			{
#>
			dst-><#= m.Key #> =	(VkStructureType) <#= m.FieldName #>;
<#
			}

			else
			{
#>
			dst-><#= m.Key #> =	<#= m.FieldName #>;
<#
			}
		}
#>
		}

		void CopyFrom(<#= s.Key #>* src)
		{
<#
		foreach(var m in s.Members)
		{
			if (m.CppType == "char*")
			{
#>
			<#= m.FieldName #> = gcnew String(<#= m.FieldName #>);
<#
			}
			else if (m.Translation != null && m.Translation.StructInfo != null)
			{
#>
			<#= m.FieldName #>->CopyFrom(&src-><#= m.Key #>);
<#
			}

			else if (m.CppType == "VkStructureType")
			{
#>
			<#= m.FieldName #> = (StructureType) src-><#= m.Key #>;
<#
			}

			else if (m.CppType == "VkBool32")
			{
#>
			<#= m.FieldName #> = src-><#= m.Key #> != 0;
<#
			}

			else 
			{
#>
			<#= m.FieldName #> = src-><#= m.Key #>;
<#
			}
		}
#>
		}
	};

<#  
	}	
#>
}